generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRESQL")
}

model founder {
  id        Int
  name      String?
  bio       String?
  linkedIn  String?
  startupId String
  website   String?
  startup   startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@id([id, startupId])
}

model startup {
  id            String    @id @unique @default(uuid())
  companyName   String?
  email         String    @unique
  otp           String?
  linkedIn      String?
  website       String?
  tracxn        String?
  social        String?
  cruchbase     String?
  sector        String?
  noOfEmployees String?
  companyVision String?
  hrName        String?
  hrEmail       String?
  hrDesignation String?
  founder       founder[]
  jobs          job[]
}

model job {
  id                String               @id @unique @default(uuid())
  companyName       String?
  title             String?
  startupId         String
  addSkill          Json
  category          String
  type              String?
  description       String?
  duration          String?
  salary            String?
  jobLocation       String?
  deadline          String?
  totalApplications String?
  totalRequired     String?
  createdAt         String?
  approval          String?
  skillsRequired    String[]
  perks             String[]
  qualification     String[]
  responsibilities  String[]
  selectionProcess  String[]
  assignment        String[]
  startup           startup              @relation(fields: [startupId], references: [id], onDelete: Cascade)
  studentsApplied   studentApplication[]
}

model studentApplication {
  id                 String  @id @unique @default(uuid())
  studentId          String
  jobId              String
  status             String  @default("Applied")
  whyShouldWeHireYou String?
  job                job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  student            student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([jobId, studentId])
}

model student {
  id          String               @id @unique @default(uuid())
  name        String?
  imglink     String?
  email       String               @unique
  otp         String?
  course      String?
  department  String?
  year        String?
  cgpa        String?
  resumeLink  String?
  linkedIn    String?
  isVerified  Boolean              @default(true)
  resumeId    String?
  college     String?
  jobsApplied studentApplication[]
}

model admin {
  id       String @id @unique @default(uuid())
  username String @unique
  password String
}
